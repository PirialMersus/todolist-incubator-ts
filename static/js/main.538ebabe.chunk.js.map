{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","state/auth-reducer.ts","state/app-reducer.ts","state/todolists-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","api/tasks-api.ts","state/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","featiures/TodolistsList/Task/Task.tsx","featiures/TodolistsList/Todolist/Todolist.tsx","featiures/TodolistsList/TodolistsList.tsx","featiures/Login/Login.tsx","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","title","put","delete","post","get","authAPI","email","password","handleServerAppError","data","dispatch","messages","length","setErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setIsInitialisedAC","changeTodolistEntityStatusAC","id","entityStatus","fetchTodolistsTC","then","res","todos","catch","Alert","props","elevation","variant","ErrorSnackbar","useDispatch","React","useState","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriorities","tasksAPI","taskId","model","changeTaskEntityStatusAC","AddItemForm","memo","setTitle","setError","onClickHandler","trim","addItem","TextField","disabled","label","onChange","e","taskText","currentTarget","onKeyPress","charCode","IconButton","color","onClick","AddBox","className","EditableSpan","editMode","setEditMode","setValue","autoFocus","onBlur","editItem","class","onDoubleClick","Task","task","todoListId","removeTask","clickOnCheckBox","Checkbox","newIsDoneValue","checked","Completed","New","aria-label","Delete","Todolist","useEffect","action","tasks","setTasksAC","items","allTodolistTasks","tasksForTodolist","filter","t","addTask","useCallback","tempTaskValue","editTaskTitle","editTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","removeTodolist","map","key","Button","TodolistsList","isLogin","authReducer","todolists","resultCode","removeTodoListsAC","removeTodolistTC","addTodolist","todolistTitle","order","addedDate","addTodoListsAC","item","getState","find","changeTodoListTitleAC","changeTodolistTitleTC","taskValue","taskTitile","addTaskTC","newTitle","startDate","priority","description","deadline","editTaskTitleAC","changeTaskTitleTC","removeTaskAC","removeTaskTC","changeTaskStatus","changeTaskStatusAC","updateTaskStatusTC","Grid","container","style","padding","spacing","tl","Paper","to","Login","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","handleBlur","getFieldProps","touched","FormControlLabel","control","name","handleChange","App","demo","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","stateCopy","newTasks","todolistTasks","newTasksArray","copyState","forEach","todolist","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.538ebabe.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {FilterValuesType} from \"../state/todolists-reducer\";\r\nimport {RequestStatusType} from '../state/app-reducer';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        // Не забываем заменить API-KEY на собственный\r\n        'API-KEY': '58f1b79a-5b08-4add-9043-639dedc61352'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport const todolistAPI = {\r\n    updateTodolist(todolistId: string, title: string) {\r\n        const promise = instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title: title})\r\n        return promise\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        const promise = instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\r\n        return promise\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n        return promise\r\n    },\r\n    getTodolists() {\r\n        const promise = instance.get<Array<TodolistType>>('todo-lists')\r\n        return promise\r\n    }\r\n}\r\n\r\ntype AuthApiResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>,\r\n    data: {\r\n        userId: number\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string) {\r\n        const promise = instance.post<AuthApiResponseType>('auth/login', {email, password})\r\n        return promise\r\n    },\r\n    me() {\r\n        const promise = instance.get<AuthMeResponseType>('auth/me',)\r\n        return promise\r\n    },\r\n    logout(){\r\n        const promise = instance.delete('auth/login')\r\n        return promise\r\n    }\r\n}\r\nexport type AuthMeResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n}\r\n\r\n","import { setErrorAC, SetErrorACType, setAppStatusAC, SetAppStatusACType } from '../state/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolist-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetErrorACType | SetAppStatusACType>","import { Dispatch } from 'redux'\r\nimport { SetErrorACType, setAppStatusAC, SetAppStatusACType } from './app-reducer'\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {changeTodolistEntityStatusAC} from \"./todolists-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {addTaskAC} from \"./tasks-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (email: string, password: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(email, password)\r\n        .then((res) => {\r\n            // debugger\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                // debugger\r\n                handleServerAppError(res.data, dispatch)\r\n                // if (res.data.messages.length) {\r\n                //     dispatch(setErrorAC(res.data.messages[0]))\r\n                // } else {\r\n                //     dispatch(setErrorAC('Some error occured'))\r\n                // }\r\n                // dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            debugger\r\n            handleServerNetworkError(error, dispatch)\r\n            // dispatch(setErrorAC(error.message))\r\n            // dispatch(setAppStatusAC('failed'))\r\n\r\n        })\r\n\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusACType | SetErrorACType\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {authAPI} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoggedInAC} from \"./auth-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type TypeOfInitialState = {\r\n    status: RequestStatusType\r\n    error: null | string\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: TypeOfInitialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALISED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({\r\n    type: 'APP/SET-STATUS',\r\n    status\r\n}) as const\r\nexport type SetAppStatusACType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport const setIsInitialisedAC = (isInitialized: boolean) => ({\r\n    type: 'APP/SET-IS-INITIALISED',\r\n    isInitialized\r\n}) as const\r\nexport type SetIsInitialisedACType = ReturnType<typeof setIsInitialisedAC>\r\n\r\n\r\nexport const setErrorAC = (error: null | string) => ({\r\n    type: 'APP/SET-ERROR',\r\n    error\r\n}) as const\r\nexport type SetErrorACType = ReturnType<typeof setErrorAC>\r\n\r\ntype ActionsType = SetAppStatusACType | SetErrorACType | SetIsInitialisedACType\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n                dispatch(setIsInitialisedAC(true))\r\n            } else {\r\n                dispatch(setIsInitialisedAC(true))\r\n            }\r\n        })\r\n}\r\n// export const setIsInitialisedTC = (isInitialized: boolean) => (dispatch: Dispatch) => {\r\n//     debugger\r\n//     dispatch(setIsInitialisedAC(isInitialized))\r\n// }\r\n","import {v1} from \"uuid\";\r\nimport {todolistAPI, TodolistType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType, setAppStatusAC, setErrorAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type RemoveTodoListsAT = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    id: string\r\n}\r\n// export type SetTodoListsAT = {\r\n//     type: \"SET-TODOLISTS\"\r\n//     todolistId: string\r\n// }\r\nexport type AddTodoListsAT = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todolistId: string\r\n    addedDate: string\r\n    order: number\r\n}\r\ntype ChangeTodoListTitleAT = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    id: string,\r\n    title: string\r\n}\r\ntype ChangeTodoListFilterAT = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\n\r\ntype ActionType = RemoveTodoListsAT\r\n    | AddTodoListsAT\r\n    | ChangeTodoListTitleAT\r\n    | ChangeTodoListFilterAT\r\n    | SetTodoListsAT\r\n    | ChangeTodolistEntityStatusACType\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todoListReducer = (state: Array<TodolistDomainType> = initialState, action: ActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate: action.addedDate,\r\n                order: action.order,\r\n                entityStatus: \"succeeded\"\r\n            }, ...state]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"SET-TODOLISTS\":\r\n            return action.todos.map(tl => {\r\n                return {...tl, filter: 'all', entityStatus: \"succeeded\"}\r\n            })\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему entityStatus\r\n                todolist.entityStatus = action.entityStatus;\r\n            }\r\n            return [...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\nexport type ChangeTodolistEntityStatusACType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType): ChangeTodoListFilterAT => {\r\n    return ({\r\n        type: \"CHANGE-TODOLIST-FILTER\",\r\n        id,\r\n        filter\r\n    })\r\n}\r\nexport const changeTodoListTitleAC = (id: string,\r\n                                      title: string): ChangeTodoListTitleAT => {\r\n    return ({\r\n        type: \"CHANGE-TODOLIST-TITLE\",\r\n        id,\r\n        title\r\n    })\r\n}\r\nexport const addTodoListsAC = (title: string, id: string, order: number, addedDate: string): AddTodoListsAT => {\r\n    return ({\r\n        type: 'ADD-TODOLIST',\r\n        title,\r\n        todolistId: id,\r\n        order,\r\n        addedDate\r\n    })\r\n}\r\nexport const removeTodoListsAC = (todolistId: string): RemoveTodoListsAT => {\r\n    return ({\r\n        type: \"REMOVE-TODOLIST\",\r\n        id: todolistId\r\n    })\r\n}\r\nexport const setTodosAC = (todos: Array<TodolistType>) => {\r\n    return ({\r\n        type: \"SET-TODOLISTS\",\r\n        todos\r\n    } as const)\r\n}\r\nexport type SetTodoListsAT = ReturnType<typeof setTodosAC>\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodoListsAC(title,\r\n                        res.data.data.item.id,\r\n                        res.data.data.item.order,\r\n                        res.data.data.item.addedDate\r\n                    ))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    // if (res.data.messages.length) {\r\n                    //     dispatch(setErrorAC(res.data.messages[0]))\r\n                    // } else {\r\n                    //     dispatch(setErrorAC('Some error occurred'))\r\n                    // }\r\n                    // dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = removeTodoListsAC(todolistId);\r\n                dispatch(action);\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const allTodosFromState = getState().todolists;\r\n    const todo = allTodosFromState.find(t => {\r\n        return t.id === todolistId\r\n    })\r\n    if (todo) {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.updateTodolist(todolistId, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = changeTodoListTitleAC(todolistId, title)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolists()\r\n        .then((res) => {\r\n            if (res.data) {\r\n                dispatch(setTodosAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                dispatch(setErrorAC('Something is wrong'))\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setErrorAC('Unknown error'))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setErrorAC} from \"../../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={ error !== null } autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" >\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import axios from 'axios'\r\nimport {RequestStatusType} from \"../state/app-reducer\";\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        // Не забываем заменить API-KEY на собственный\r\n        'API-KEY': '9476c46e-7c10-4ffa-9254-18d86a739ede'\r\n    }\r\n})\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype ResponseType<D> = {\r\n    resultCode: number\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    data: D\r\n}\r\ntype GetTasksResponseType = {\r\n    error: null | string\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n}\r\ntype DeleteTaskResponseType = {\r\n    resultCode: number\r\n    data: {}\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n}\r\ntype UpdateTaskResponseType = {\r\n    resultCode: number\r\n    data: {item: TaskType}\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n}\r\n\r\nexport const tasksAPI = {\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        const promise = instance.put<UpdateTaskResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n        return promise\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        const promise = instance.delete<DeleteTaskResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n        return promise\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n        return promise\r\n    },\r\n    getTasks(todolistId: string) {\r\n        const promise = instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n        return promise\r\n    }\r\n}\r\n","import {AddTodoListsAT, RemoveTodoListsAT, SetTodoListsAT, changeTodolistEntityStatusAC} from \"./todolists-reducer\";\r\nimport {tasksAPI, TaskStatuses, TaskType} from \"../api/tasks-api\";\r\nimport {TasksType} from \"../App\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType, setAppStatusAC, setErrorAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\ntype AddTaskAT = {\r\n    type: \"ADD_TASK\"\r\n    task: TaskType\r\n}\r\n\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\n\r\ntype EditTaskTitleAT = {\r\n    type: \"EDIT_TASK_TITLE\"\r\n    title: string\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ntype RemoveTaskAT = {\r\n    type: \"REMOVE_TASK\"\r\n    todolistId: string,\r\n    taskId: string\r\n}\r\ntype ChangeTaskStatusAT = {\r\n    type: \"CHANGE_TASK_STATUS\"\r\n    taskId: string\r\n    todolistId: string\r\n    status: TaskStatuses\r\n}\r\n\r\n\r\ntype ActionType = AddTaskAT\r\n    | EditTaskTitleAT\r\n    | RemoveTaskAT\r\n    | ChangeTaskStatusAT\r\n    | AddTodoListsAT\r\n    | RemoveTodoListsAT\r\n    | SetTodoListsAT\r\n    | SetTasksActionType\r\n    | ChangeTaskEntityStatusACType\r\n\r\nconst initialState: TasksType = {}\r\n\r\nexport const tasksReducer = (state: TasksType = initialState, action: ActionType): TasksType => {\r\n    switch (action.type) {\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks.map((task => {\r\n                return {...task, entityStatus: 'succeeded'}\r\n            }))\r\n            return stateCopy\r\n        }\r\n        case 'ADD_TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n\r\n        case \"EDIT_TASK_TITLE\": {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n\r\n        case \"CHANGE_TASK_STATUS\": {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n\r\n        case \"REMOVE_TASK\": {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, entityStatus: action.entityStatus} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const changeTaskEntityStatusAC = (taskId: string, todolistId: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TASK-ENTITY-STATUS',\r\n    taskId,\r\n    todolistId,\r\n    entityStatus\r\n} as const)\r\nexport type ChangeTaskEntityStatusACType = ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\nexport const addTaskAC = (task: TaskType): AddTaskAT => {\r\n    return ({\r\n        type: \"ADD_TASK\",\r\n        task\r\n    })\r\n}\r\nexport const editTaskTitleAC = (title: string, todolistId: string, taskId: string\r\n): EditTaskTitleAT => {\r\n    return ({\r\n        type: \"EDIT_TASK_TITLE\",\r\n        todolistId,\r\n        title,\r\n        taskId\r\n    })\r\n}\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskAT => {\r\n    return ({\r\n        type: \"REMOVE_TASK\",\r\n        taskId,\r\n        todolistId\r\n    })\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusAT => {\r\n    return ({\r\n        type: \"CHANGE_TASK_STATUS\",\r\n        status,\r\n        todolistId,\r\n        taskId\r\n    })\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todolistId}\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, taskTitile: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        // dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n        tasksAPI.createTask(todolistId, taskTitile)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                    // dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId, \"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    // if (res.data.messages.length) {\r\n                    //     dispatch(setErrorAC(res.data.messages[0]))\r\n                    // } else {\r\n                    //     dispatch(setErrorAC('Some error occured'))\r\n                    // }\r\n                    // dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n                // dispatch(setErrorAC(error.message))\r\n                // dispatch(setAppStatusAC('failed'))\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleTC = (taskId: string, todolistId: string, newTitle: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC(taskId, todolistId, \"loading\"))\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n        if (task) {\r\n            tasksAPI.updateTask(todolistId, taskId, {\r\n                title: newTitle,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status\r\n            })\r\n                .then((res) => {\r\n                    // debugger\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(changeTaskEntityStatusAC(taskId, todolistId, \"succeeded\"))\r\n                        const action = editTaskTitleAC(newTitle, todolistId, taskId)\r\n                        dispatch(action)\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                        dispatch(changeTaskEntityStatusAC(taskId, todolistId, \"failed\"))\r\n                        // dispatch(setErrorAC(res.data.messages[0]))\r\n                        // dispatch(setAppStatusAC('failed'))\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                    dispatch(changeTaskEntityStatusAC(taskId, todolistId, \"failed\"))\r\n                    // dispatch(setErrorAC(error.message))\r\n                    // dispatch(setAppStatusAC('failed'))\r\n\r\n                })\r\n        }\r\n    }\r\n}\r\nexport const removeTaskTC = (todolistId: string, id: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(id, todolistId, \"loading\"))\r\n    tasksAPI.deleteTask(todolistId, id)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTaskEntityStatusAC(id, todolistId, \"succeeded\"))\r\n                const action = removeTaskAC(id, todolistId);\r\n                dispatch(action);\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                dispatch(changeTaskEntityStatusAC(id, todolistId, \"failed\"))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeTaskEntityStatusAC(id, todolistId, \"failed\"))\r\n\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, todolistId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(changeTaskEntityStatusAC(taskId, todolistId, \"loading\"))\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n        if (task) {\r\n            dispatch(setAppStatusAC('loading'))\r\n\r\n            tasksAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            })\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(changeTaskEntityStatusAC(taskId, todolistId, \"succeeded\"))\r\n                        const action = changeTaskStatusAC(taskId, status, todolistId)\r\n                        dispatch(action)\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                        dispatch(changeTaskEntityStatusAC(taskId, todolistId, \"failed\"))\r\n\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                    dispatch(changeTaskEntityStatusAC(taskId, todolistId, \"failed\"))\r\n\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                if (!res.data.error) {\r\n                    const tasks = res.data.items\r\n                    const action = setTasksAC(tasks, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    dispatch(setErrorAC(res.data.error))\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                dispatch(setErrorAC(error.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n\r\n            })\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    value?: string\r\n    disabled?: boolean\r\n}\r\n\r\nconst AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // setError(null)\r\n        const taskText = e.currentTarget.value\r\n        setTitle(taskText)\r\n    }\r\n    const onClickHandler = () => {\r\n        if (title.trim().length === 0) {\r\n            setError(\"Title is required!\")\r\n        } else {\r\n            error && setError(null)\r\n            props.addItem(title)\r\n            setTitle('')\r\n        }\r\n    }\r\n    const onKeyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.charCode === 13) onClickHandler()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                disabled={props.disabled}\r\n                label={\"Title\"}\r\n                error={!!error}\r\n                variant=\"outlined\"\r\n                onChange={onChangeHandler}\r\n                value={title}\r\n                onKeyPress={onKeyPressHandler}/>\r\n            {/*<input*/}\r\n            {/*    onChange={onChangeHandler}*/}\r\n            {/*    value={title}*/}\r\n            {/*    onKeyPress={onKeyPressHandler}*/}\r\n            {/*/>*/}\r\n            {/*<Button variant=\"contained\" color=\"primary\" onClick={onClickHandler}>+</Button>*/}\r\n            <IconButton color={\"primary\"} onClick={onClickHandler} disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n})\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport AddItemForm from \"../AddItemForm/AddItemForm\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {RequestStatusType} from \"../../state/app-reducer\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    editItem: (title: string, taskId?: string) => void\r\n    value: string\r\n    taskId?: string\r\n    class?: string\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [value, setValue] = useState(props.value)\r\n\r\n    const onDoubleClickHandler = () => {\r\n        if (props.entityStatus !== 'loading') {\r\n            setEditMode(true)\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n    const onBlurHandler = () => {\r\n        props.editItem(value, props.taskId)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode\r\n                ? <span className={props.class ? props.class : ''}\r\n                        onDoubleClick={onDoubleClickHandler}>{props.value}</span>\r\n                : <TextField autoFocus\r\n                             onChange={onChangeHandler}\r\n                             onBlur={onBlurHandler}\r\n                             label={value}\r\n                             variant=\"filled\"\r\n                />\r\n                // <input className={props.class ? props.class : ''}\r\n                // autoFocus\r\n                // value={value}\r\n                // onChange={onChangeHandler}\r\n                // onBlur={onBlurHandler}\r\n                // />\r\n            }\r\n        </>\r\n    )\r\n})\r\nexport default EditableSpan","import React, {ChangeEvent} from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/tasks-api\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todoListId: string\r\n    editItem: (value: string, taskId: string | undefined) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    clickOnCheckBox: (id: string, status: TaskStatuses, todolistId: string) => void\r\n}\r\n\r\nconst Task = React.memo(({task, todoListId, editItem, removeTask, clickOnCheckBox}: TaskPropsType) => {\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const newIsDoneValue = event.currentTarget.checked\r\n        clickOnCheckBox(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todoListId)\r\n    }\r\n    return (\r\n        <>\r\n            <Checkbox\r\n                onChange={onChangeHandler}\r\n                checked={task.status === TaskStatuses.Completed}\r\n                value=\"checkedA\"\r\n                color={\"primary\"}\r\n                disabled={task.entityStatus === 'loading'}\r\n            />\r\n            {/*<input*/}\r\n            {/*    type=\"checkbox\"*/}\r\n            {/*    checked={t.isDone}*/}\r\n            {/*    onChange={onChangeHandler}/>*/}\r\n            <EditableSpan\r\n                entityStatus={task.entityStatus}\r\n                editItem={editItem}\r\n                value={task.title}\r\n                taskId={task.id}/>\r\n            <IconButton\r\n                disabled={task.entityStatus === 'loading'}\r\n                aria-label=\"delete\" onClick={() => {\r\n                removeTask(task.id, todoListId)\r\n            }}><Delete/>\r\n            </IconButton>\r\n        </>\r\n    )\r\n})\r\nexport default Task","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Delete} from '@material-ui/icons';\r\nimport Button from '@material-ui/core/Button';\r\nimport Task from \"../Task/Task\";\r\nimport {TaskStatuses, TaskType} from '../../../api/tasks-api';\r\nimport {FilterValuesType} from '../../../state/todolists-reducer';\r\nimport {fetchTasksTC} from '../../../state/tasks-reducer';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../../state/app-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    entityStatus: RequestStatusType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    editTodolistTitle: (todoListId: string, title: string) => void\r\n    editTaskTitle: (value: string, todoListId: string, taskId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, id: string) => void\r\n    // setTempTaskValue: (value: string) => void\r\n    addTask: (todolistId: string, taskText: string) => void\r\n    // tempTaskValue: string\r\n    clickOnCheckBox: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    filter: string\r\n    id: string\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const allTodolistTasks = props.tasks\r\n    let tasksForTodolist = allTodolistTasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = allTodolistTasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = allTodolistTasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const addTask = useCallback((tempTaskValue: string) => {\r\n        props.addTask(props.id, tempTaskValue)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const editItem = useCallback((value: string, taskId: string | undefined) => {\r\n        if (taskId) {\r\n            props.editTaskTitle(value, props.id, taskId)\r\n        }\r\n    }, [props.editTaskTitle, props.id])\r\n\r\n    const editTodolistTitle = useCallback((title: string) => {\r\n        props.editTodolistTitle(props.id, title)\r\n    }, [props.id, props.editTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n\r\n    return <div>\r\n        <EditableSpan\r\n            editItem={editTodolistTitle}\r\n            value={props.title}\r\n            class={\"todoListTitle\"}\r\n        />\r\n        <IconButton\r\n            aria-label=\"delete\"\r\n            onClick={removeTodolist}\r\n            disabled={props.entityStatus === 'loading'}\r\n        >\r\n            <Delete/>\r\n        </IconButton>\r\n        <AddItemForm\r\n            addItem={addTask}\r\n            disabled={props.entityStatus === 'loading'}\r\n        />\r\n        <ul>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return (<li className={t.status === TaskStatuses.Completed ? \"is-done\" : \"\"} key={t.id}>\r\n                        <Task\r\n                            task={t}\r\n                            todoListId={props.id}\r\n                            editItem={editItem}\r\n                            removeTask={props.removeTask}\r\n                            clickOnCheckBox={props.clickOnCheckBox}\r\n                        />\r\n                    </li>)\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button\r\n                variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\r\n\r\n                color={\"primary\"}\r\n                onClick={onAllClickHandler}>\r\n                All\r\n            </Button>\r\n            <Button\r\n                variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                color={\"inherit\"}\r\n                onClick={onActiveClickHandler}>\r\n                Active\r\n            </Button>\r\n            <Button\r\n                variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                color={\"secondary\"}\r\n                className={\"filterButtons \" + (props.filter === \"completed\" ? \"active\" : \"\")}\r\n                onClick={onCompletedClickHandler}>\r\n                Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport '../../App.css'\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {TodolistType} from '../../api/todolist-api';\r\nimport {RequestStatusType} from '../../state/app-reducer';\r\nimport {TaskStatuses, TaskType} from \"../../api/tasks-api\";\r\nimport {AppRootStateType} from '../../state/store';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    addTodolistTC,\r\n    changeTodoListFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC\r\n} from \"../../state/todolists-reducer\";\r\nimport {addTaskTC, changeTaskTitleTC, removeTaskTC, updateTaskStatusTC} from \"../../state/tasks-reducer\";\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from './Todolist/Todolist';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport type TodolistsType = Array<TodolistType>\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction TodolistsList(props: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const isLogin = useSelector<AppRootStateType, boolean>(state => state.authReducer.isLoggedIn)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksType>(state => state.tasks\r\n    )\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status\r\n    )\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, [, tasks])\r\n\r\n    const addTodolist = useCallback((todolistTitle: string) => {\r\n        const action = addTodolistTC(todolistTitle)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodoListFilterAC(todolistId, value))\r\n    }, [])\r\n\r\n    const editTodolistTitle = useCallback((todoListId: string, title: string) => {\r\n        dispatch(changeTodolistTitleTC(todoListId, title))\r\n    }, [])\r\n\r\n\r\n    const addTask = useCallback((todolistId: string, taskValue: string) => {\r\n        if (taskValue.trim().length !== 0) {\r\n            (dispatch(addTaskTC(todolistId, taskValue)))\r\n        }\r\n    }, [])\r\n\r\n    const editTaskTitle = useCallback((value: string, todolistId: string, taskId: string) => {\r\n        dispatch(changeTaskTitleTC(taskId, todolistId, value))\r\n    }, [])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(todolistId, id))\r\n    }, [])\r\n\r\n    const changeTaskStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskStatusTC(id, todolistId, status))\r\n    }, [])\r\n\r\n    if (!isLogin){\r\n        return <Redirect to='/login'/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Grid container style={{padding: \"10px\"}}>\r\n                <AddItemForm addItem={addTodolist} disabled={status === 'loading'}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        return (<Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist title={tl.title}\r\n                                              filter={tl.filter}\r\n                                              entityStatus={tl.entityStatus}\r\n                                              clickOnCheckBox={changeTaskStatus}\r\n                                              editTodolistTitle={editTodolistTitle}\r\n                                              editTaskTitle={editTaskTitle}\r\n                                              tasks={tasks[tl.id]}\r\n                                              removeTask={removeTask}\r\n                                              changeFilter={changeFilter}\r\n                                              addTask={addTask}\r\n                                              id={tl.id}\r\n                                              removeTodolist={removeTodolist}\r\n                                    /></Paper></Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodolistsList;\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../state/auth-reducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isLogin = useSelector<AppRootStateType, boolean>(state => state.authReducer.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length === 0) {\r\n                errors.password = 'enter the password'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'password is to small';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLogin) {\r\n        return <Redirect to='/'/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            type='email'\r\n                            onBlur={formik.handleBlur}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin='normal'\r\n                            onBlur={formik.handleBlur}\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                name='password'\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.password}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport {fetchTodolistsTC} from './state/todolists-reducer';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TaskType} from './api/tasks-api';\r\nimport {initializeAppTC, RequestStatusType} from './state/app-reducer';\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {TodolistType} from \"./api/todolist-api\";\r\nimport {Redirect, Route, Switch, useHistory} from 'react-router-dom'\r\nimport TodolistsList from \"./featiures/TodolistsList/TodolistsList\";\r\nimport {Login} from './featiures/Login/Login';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {logoutTC} from \"./state/auth-reducer\";\r\n\r\nexport type TodolistsType = Array<TodolistType>\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App(props: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLogin = useSelector<AppRootStateType, boolean>(state => state.authReducer.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (props.demo || !isLogin){\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status\r\n    )\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={\"\"} color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu open={false}/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={\"\"}>\r\n                        News\r\n                    </Typography>\r\n                    {isLogin && <Button color=\"inherit\" onClick={onClickHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color={\"secondary\"}/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={props.demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={ '/404' } render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// import {}\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todoListReducer} from \"./todolists-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { appReducer } from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListReducer,\r\n    app: appReducer,\r\n    authReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/store';\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}